
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;

namespace CSKicksCollection.Trees
{
    class BinaryTreeNode<T>
        where T : IComparable
    {
        private T value;
        private BinaryTreeNode<T> leftChild;
        private BinaryTreeNode<T> rightChild;
        private BinaryTreeNode<T> parent;
        private BinaryTree<T> tree;

        public virtual T Value { get; set; }

        public virtual BinaryTreeNode<T> LeftChild { get; set; }
        public virtual BinaryTreeNode<T> RightChild { get; set; }
        public virtual BinaryTreeNode<T> Parent { get; set; }
        public virtual BinaryTree<T> Tree { get; set; }
        public virtual bool IsLeaf
        {
            get { return this.ChildCount == 0; }
        }

        public virtual bool IsInternal
        {
            get { return this.ChildCount > 0; }
        }

        public virtual bool IsLeftChild
        {
            get { return this.Parent != null && this.Parent.LeftChild == this; }
        }
        public virtual bool IsRightChild
        {
            get { return this.Parent != null && this.Parent.RightChild == this; }
        }

        public virtual int ChildCount
        {
            get
            {
                int count = 0;
                if (this.LeftChild != null)
                    count++;
                if (this.RightChild != null)
                    count++;
                return count;
            }
        }

        public virtual bool HasLeftChild
        {
            get { return (this.LeftChild != null); }
        }

        public virtual bool HasRightChild
        {
            get { return (this.RightChild != null); }
        }

        public BinaryTreeNode(T value)
        {
            this.value = value;
        }
    }


    class BinaryTree<T> : ICollection<T>
        where T : IComparable
    {

        public enum TraversalMode
        {
            InOrder = 0,
            PostOrder,
            PreOrder
        }

        private BinaryTreeNode<T> head;
        private Comparison<IComparable> comparer = CompareElements;
        private int size;
        private TraversalMode traversalMode = TraversalMode.InOrder;

        public virtual BinaryTreeNode<T> Root
        {
            get { return head; }
            set { head = value; }
        }

        public virtual bool IsReadOnly
        {
            get { return false; }
        }
>
        public virtual int Count
        {
            get { return size; }
        }

        public virtual TraversalMode TraversalOrder
        {
            get { return traversalMode; }
            set { traversalMode = value; }
        }

        public BinaryTree()
        {
            head = null;
            size = 0;
        }

        public virtual void Add(T value)
        {
            BinaryTreeNode<T> node = new BinaryTreeNode<T>(value);
            this.Add(node);
        }

        public virtual void Add(BinaryTreeNode<T> node)
        {
            if (this.head == null)
            {
                this.head = node;
                node.Tree = this;
                size++;
            }
            else
            {
                if (node.Parent == null)
                    node.Parent = head;

                //Узел вставлен с левой стороны, если он меньше или равен родительскому
                bool insertLeftSide = comparer((IComparable)node.Value, (IComparable)node.Parent.Value) <= 0;

                if (insertLeftSide)
                    AddNode(node.Parent.LeftChild);
                else AddNode(node.Parent.RightChild);
            }
        }
        public void AddNode(BinaryTreeNode a)
        {
            if (a == null)
            {
                a = node;
                size++;
                node.Tree = this; //добавить к дереву
            }
            else
            {
                node.Parent = a; //сканировать до крайнего
                this.Add(node);//рекурсивно вызываем
            }
        }
        public virtual BinaryTreeNode<T> Find(T value)
        {
            BinaryTreeNode<T> node = this.head;
            while (node != null)
            {
                if (node.Value.Equals(value))
                    return node;
                else
                {
                    //Искать влево, если значение меньше текущего узла
                    bool searchLeft = comparer((IComparable)value, (IComparable)node.Value) < 0;

                    if (searchLeft)
                        node = node.LeftChild; //идём влево 
                    else
                        node = node.RightChild; //вправо
                }
            }

            return null;
        }

        public virtual bool Remove(BinaryTreeNode<T> removeNode)
        {
            if (removeNode == null || removeNode.Tree != this)
                return false; //значения не существует или нет этого дерева

            //является ли удаляемый узел корнем дерева
            bool wasHead = (removeNode == head);

            if (this.Count == 1)
            {
                this.head = null; //единственным элементом был корень
                removeNode.Tree = null;

                size--;
            }
            else if (removeNode.IsLeaf) //Case 1: Нет детей
            {
                // Удалить узел из его родителя
                if (removeNode.IsLeftChild)
                    removeNode.Parent.LeftChild = null;
                else
                    removeNode.Parent.RightChild = null;

                removeNode.Tree = null;
                removeNode.Parent = null;

                size--;
            }
            else if (removeNode.ChildCount == 1) //Case 2: 2 ребенка
            {
                if (removeNode.HasLeftChild)
                    Remove2(removeNode.LeftChild);
                else //есть правый лист(ребенок)
                    Remove2(removeNode.RightChild);

                removeNode.Tree = null;
                removeNode.Parent = null;
                removeNode.LeftChild = null;
                removeNode.RightChild = null;

                size--;
            }
            else //Case 3:3 ребенка
            {
                // Найти предшественника inorder (самый правый узел в левом поддереве)
                BinaryTreeNode<T> successorNode = removeNode.LeftChild;
                while (successorNode.RightChild != null)
                {
                    successorNode = successorNode.RightChild;
                }

                removeNode.Value = successorNode.Value; //заменить значение

                this.Remove(successorNode); //рекурсивно удалять предшественника
            }


            return true;
        }
        public void Remove2(BinaryTreeNode s)
        {
            s.Parent = removeNode.Parent; //Обновить родителей

            if (wasHead)
                this.Root = removeNode.LeftChild; //обновить корневую ссылку, если необходимо

            if (removeNode.IsLeftChild) //обновить родительскую ссылку
                removeNode.Parent.LeftChild = a;
            else
                removeNode.Parent.RightChild = a;
        }


        public virtual int GetHeight(BinaryTreeNode<T> startNode)
        {
            if (startNode == null)
                return 0;
            else
                return 1 + Math.Max(GetHeight(startNode.LeftChild), GetHeight(startNode.RightChild));
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return this.GetEnumerator();
        }
        public virtual IEnumerator<T> GetInOrderEnumerator()
        {
            return new BinaryTreeInOrderEnumerator(this);
        }
    }
}
